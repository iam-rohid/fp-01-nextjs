create table "public"."profiles" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "first_name" text,
    "last_name" text,
    "email" text,
    "avatar_url" text,
    "stripe_customer_id" text
);


alter table "public"."profiles" enable row level security;

create table "public"."sellers" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "estimate_sales" double precision not null,
    "latitude" double precision not null,
    "longitude" double precision not null
);


alter table "public"."sellers" enable row level security;

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX sellers_pkey ON public.sellers USING btree (id);

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."sellers" add constraint "sellers_pkey" PRIMARY KEY using index "sellers_pkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

create policy "user can select their own profile"
on "public"."profiles"
as permissive
for select
to authenticated
using ((auth.uid() = id));


create policy "every authenticated user can select sellers"
on "public"."sellers"
as permissive
for select
to authenticated
using (true);



